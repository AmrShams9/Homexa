const express = require("express");
const sqlite3 = require("sqlite3").verbose();
const path = require("path");
const methodOverride = require('method-override');
const session = require('express-session');

const app = express();
const db = new sqlite3.Database("database.db");
app.use(methodOverride('_method'));

// Then your routes

// ุฅุนุฏุงุฏ ุงููุญุฑู ูุงูููุงูุจ
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));
// Add this at the top of your main JS file


// ุฅุนุฏุงุฏ ุงูููุฏูููุฑ
app.use(express.static(path.join(__dirname, "public")));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(session({
  secret: 'secret-key-homeexa-123',  // ๐ ุงุณุชุจุฏูู ุจุณุทุฑ ุนุดูุงุฆู ููู ูู ุงูุฅูุชุงุฌ
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false } // true ููุท ุฅุฐุง ููุช ุชุณุชุฎุฏู HTTPS
}));

// ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู ุฅุฐุง ูู ููู ููุฌูุฏูุง
db.run(`
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        fullName TEXT,
        username TEXT UNIQUE,
        password TEXT,
        role TEXT CHECK(role IN ('admin', 'user')) DEFAULT 'user',
        supplier TEXT,
        branch TEXT,
        phone TEXT,
        email TEXT
    )
`);

// ุฅูุดุงุก ุฌุฏูู ุงูุทูุจุงุช ุฅุฐุง ูู ููู ููุฌูุฏูุง
db.run(`
  CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customerPhone TEXT NOT NULL,
    customerName TEXT NOT NULL,
    customerLat REAL NOT NULL,
    customerLng REAL NOT NULL,
    serviceDate TEXT NOT NULL, 
    serviceTime TEXT NOT NULL,
    paymentMethod TEXT NOT NULL,
    status TEXT CHECK(status IN ('InProgress', 'On Hold', 'completed', 'canceled', 'Assigned', 'New')) DEFAULT 'New',
    totalPrice REAL NOT NULL DEFAULT 0,
    createdAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    createdByUserId INTEGER,
FOREIGN KEY (createdByUserId) REFERENCES users(id)
   
    )
`);


/////////////////////////////Services Talble///////////////////////////////
// db.run("DROP TABLE IF EXISTS services", (err) => {
//   if (err) return console.error("โ ูุดู ุญุฐู ุงูุฌุฏูู:", err.message);
//   console.log("โ ุชู ุญุฐู ุฌุฏูู ุงูุฎุฏูุงุช ุจูุฌุงุญ");
// });

db.run(`
    CREATE TABLE IF NOT EXISTS services (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  category Text NOT NULL,
  price REAL NOT NULL
     )`);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     db.run(`
      CREATE TABLE IF NOT EXISTS task_services (
  
  task_id INTEGER NOT NULL,
  service_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL DEFAULT 1,  
  FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
  FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE
         )`);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      db.run(`
        CREATE TABLE IF NOT EXISTS time_slots (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  label TEXT NOT NULL,
  start TEXT NOT NULL,
  end TEXT NOT NULL
)
`);
///////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////

// ุฅุถุงูุฉ ูุณุชุฎุฏููู ุงูุชุฑุงุถููู ุฅุฐุง ูู ูููููุง ููุฌูุฏูู
db.run("INSERT OR IGNORE INTO users (fullName, username, supplier, branch, phone, email, password, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 
    ["Admin User", "admin", "ุงูููุฑุฏ ุงูุฑุฆูุณู", "ุงููุฑุน ุงูุฑุฆูุณู", "0500000000", "admin@example.com", "adminpass", "admin"]);

// db.run("INSERT OR IGNORE INTO users (fullName, username, supplier, branch, phone, email, password, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 
//     ["Normal User", "user", "ููุฑุฏ ุนุงุฏู", "ูุฑุน ูุฑุนู", "0511111111", "user@example.com", "userpass", "user"]);
    db.get("SELECT COUNT(*) AS count FROM services", (err, row) => {
        if (err) {
            return console.error("Error counting services:", err.message);
        }
    
        if (row.count > 70) {
            console.log("โ ุงูุฎุฏูุงุช ููุฌูุฏุฉ ูุณุจููุงุ ูู ูุชู ุฅุนุงุฏุฉ ุฅุฏุฎุงููุง.");
            return;
        }
    
        // ุฅุฏุฎุงู ุงูุจูุงูุงุช ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
        db.serialize(() => {
          db.run("INSERT INTO services (name, price, category) VALUES ('ุงูุญุต ุณุจุงูุฉ ุจูุชู', 400, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุงูุญุต ููุฑุจุงุก ุจูุชู', 400, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฃุณูุณ ุฅูุงุฑุฉ ุฃุฑุถูุฉ', 75, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฃุณูุณ ุฎุท ุงู ููุทุฉ ููุฑุจุงุฆูุฉ ุฎุงุฑุฌู', 70, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุจุฏูู ููุด ููุฑุจุงุก', 20, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุซุจูุช ุงูููู ุงูุฐูู ููุจุงุจ ุจุฏูู ุจุฑูุฌุฉ', 120, 'ุฐูู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงูุณุณูุงุฑุงุช ุฏูุฑุฉ ููุงู ุงู ูุฑุขู / ุจุงูุญุจุฉ ุงููุงุญุฏุฉ', 25, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงูุชุฑููู', 200, 'ุฐูู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ุงูุณุฎุงู ุนุงุฏู', 100, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ุฏุด ุงูุงุณุชุญูุงู', 50, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ุฏูููู', 200, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ุตูุงูุฉ ุฃุฑุถูุฉ', 50, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ุนูุงูุฉ ุฎุฒุงู', 70, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ููุจ ุณุฎุงู ูุฑูุฒู', 80, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ููุชุงุญ ุงูุงุฑุฉ', 20, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ููุชุงุญ ุชุดุบูู ุงููููู ุงู ุงูุณุฎุงู', 30, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุฃู ุชุบููุฑ ุฅูุงุฑุฉ ุฃุฑุถูุฉ', 35, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุซุฑูุง ุฌุงูุฒุฉ', 75, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุซุฑูุง ูุน ุชูุตูู ุงูุงูุณุณูุงุฑุงุช ูููุญูุงุชูุง', 190, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุฌุฑุณ', 50, 'ุฐูู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุญุงูู ุชููุฒููู', 40, 'ุงุฎุฑู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุฅูุงุฑุฉ ูุน ุชุฎุฑูู ( ุงูุญุฌู ุงูุตุบูุฑ )', 30, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุฅูุงุฑุฉ ูุน  ุชุฎุฑูู ( ุงูุญุฌู ุงููุจูุฑ )', 50, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุงู ุชุบููุฑ ุณุฎุงู ูุฎูู / ููุฑู', 150, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุณูุงุนุฉ ุฏุด', 20, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุณูููู ุนุฑุจู', 80, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุดุฑูุท ููุฏ ูุฎูู ( ุงูุซุฑ ูู 10 ูุชุฑ )', 15, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุดุฑูุท ููุฏ ูุฎูู ( 10 ูุชุฑ ูุฃูู )', 30, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุทุจููู ููุฑุจุงุก ูุงูู ุฏุงุฎูู', 500, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ููุชุฑ ููุงู', 200, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ูุงุจููุฉ ุงุณุชุญูุงู ุดุงูุฑ ( ุญูุงุฌุฒ )', 300, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ูุฑุณู ุงูุฑูุฌู', 150, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุงุฒุงูุฉ ูุฑุณู ุงูุฑูุฌู', 100, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ููุจุงุช ูููู', 40, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ููุญุฉ', 30, 'ุงุฎุฑู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ูุฑูุญุฉ ุดูุท', 50, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ูุบุณูุฉ', 150, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงู ุชุฑููุจ ูุบุณูุฉ ุฏููุงุจ', 200, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุทูู ุดูุฑ', 200, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุณููู ุงูุณุฏุงุฏ ุงูุชุตุฑูู', 300, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุณููู ุงูุณุฏุงุฏ ุญูุถ ุงููุทุจุฎ', 80, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงููุดุงู ุงูุฎุงุฑุฌู', 50, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงู ุชุฑููุจ ุฎูุงุท', 50, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงู ุชุฑููุจ ุฑุฏุงุฏ ุณุฎุงู', 50, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงู ุชุฑููุจ ุดุทุงู', 30, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงู ุชุฑููุจ ููู ุงูุฃุจูุงุจ', 40, 'ุงุฎุฑู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุงู ุชุฑููุจ ููุจุถ ุงูุฃุจูุงุจ', 40, 'ุงุฎุฑู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุณุจูุช ูุงูุช', 15, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุดูุนุฉ ุนุงููุฏ (400led)', 50, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ุบุทุงุก ูุฑุณู ุงูุฑูุฌู', 44, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ููุจ ุณุฎุงู ุนุงุฏู', 80, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ููุจุงุช ุงูุณุทุญ', 35, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ูุญุจุณ ุฒุงููุฉ', 25, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ูุญุจุณ ุฒุงููุฉ ูุน ูู', 50, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูููุฑ ููุชุงุญ ูุฑุนู ูุทุจููู ุงูููุฑุจ', 50, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ูุฑุงุจ ูุบุณูุฉ', 35, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑุนูุงูุฉ ุงูุฎุฒุงู', 80, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุบููุฑ ููุชุงุญ  ุฑุฆูุณู ูุทุจููู ุงูููุฑุจุงุก', 120, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุฏูุฏ ุชุตุฑูู ุงูุบุณุงูุฉ', 150, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุฏูุฏ ููุด ููุฑุจุงุก', 50, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุฏูุฏ ููุฑุจุงุก ูุบุณุงูุฉ ุงู ูุดุงูุฉ ููุงุจุณ ุฌุฏูุฏ ูู ุงูุทุจููู', 150, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุฏูุฏ ููุฑุจุงุก ููุฑู ุฌุฏูุฏ ูู ุงูุทุจููู', 150, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุธูู ุฎุฒุงูุงุช', 180, ' ุณุจุงูุฉ');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุธูู ุณุฎุงู ุนุงุฏู', 80, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุตูุงูุฉ ุงูุชุฑููู', 120, 'ุฐูู');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ูู ูุชุฑููุจ ูุฑุณู ุนุฑุจู', 250, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชูุธูู ุณุฎุงู ูุฑูุฒู', 150, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุฑููุจ ุณุฎุงู ูุฑูุฒู', 250, 'ููุฑุจุงุก');");
          db.run("INSERT INTO services (name, price, category) VALUES ('ุชุจุฏูู ุฅูุงุฑุฉ', 20, 'ููุฑุจุงุก');");
          
        });
    });
    
    

// ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get("/", (req, res) => {
    res.render("Login_page");
});

app.get("/user_dashboard", (req, res) => {
  const user = req.session.user;
  if (!user) return res.redirect("/");

  const taskQuery = `
    SELECT t.*, GROUP_CONCAT(s.name, ', ') AS serviceNames
    FROM tasks t
    LEFT JOIN task_services ts ON t.id = ts.task_id
    LEFT JOIN services s ON ts.service_id = s.id
    WHERE t.createdByUserId = ?
    GROUP BY t.id
    ORDER BY t.createdAt DESC
  `;

  const slotsQuery = `SELECT * FROM time_slots ORDER BY start`;

  db.all(taskQuery, [user.id], (err, tasks) => {
    if (err) {
      console.error("Error loading tasks:", err);
      return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุทูุจุงุช");
    }

    db.all(slotsQuery, [], (err, slots) => {
      if (err) {
        console.error("Error loading time slots:", err);
        return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงููุชุฑุงุช ุงูุฒูููุฉ");
      }

      res.render("user_dashboard", { tasks, slots }); // ๐ ูุฑุฑ ุฃูุถูุง slots
    });
  });
});



// ุชุณุฌูู ุงูุฏุฎูู ููุนุฑูุฉ ุงูุฏูุฑ
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  db.get("SELECT * FROM users WHERE username = ? AND password = ?", [username, password], (err, user) => {
      if (err) {
          console.error("Error fetching user:", err);
          return res.send(`<script>alert("ุญุฏุซ ุฎุทุฃ ุฏุงุฎูู."); window.location.href = "/";</script>`);
        
      }
      if (!user) {
          return res.send(`<script>alert("ุงุณู ุงููุณุชุฎุฏู ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ"); window.location.href = "/";</script>`);
      }

      // โ ุญูุธ ุงููุณุชุฎุฏู ูู ุงูุฌูุณุฉ
      req.session.user = {
          id: user.id,
          username: user.username,
          fullName: user.fullName,
          role: user.role
      };

      if (user.role === "admin") {
          res.redirect("/admin_dashboard");
      } else {
          res.redirect("/user_dashboard");
      }
  });
});
app.get("/api/me", (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ message: "ุบูุฑ ูุตุฑุญ" });
  }

  res.json(req.session.user); // ุชุฑุฌุน ุจูุงูุงุช ุงูุฌูุณุฉ ูููุณุชุฎุฏู ุงูุญุงูู
});

app.post("/logout", (req, res) => {
  req.session.destroy(err => {
    if (err) {
      return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุณุฌูู ุงูุฎุฑูุฌ.");
    }
    res.redirect("/");
  });
});



// ุนุฑุถ ููุญุฉ ุชุญูู ุงููุดุฑู
app.get("/admin_dashboard", (req, res) => {
  db.all("SELECT * FROM users", [], (err, users) => {
    if (err) return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงููุณุชุฎุฏููู.");

    db.all("SELECT * FROM time_slots", [], (err, timeSlots) => {
      if (err) return res.status(500).send("ุฎุทุฃ ูู ุงููุชุฑุงุช ุงูุฒูููุฉ");

      db.all("SELECT * FROM services", [], (err, services) => {
        if (err) return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุฎุฏูุงุช");

        res.render("admin_dashboard", {
          users,
          timeSlots,
          services // โ ูุฑุฑ ุงูุฎุฏูุงุช ููุง
        });
      });
    });
  });
});
app.post("/update-timeslots", (req, res) => {
  const { ids, labels, starts, ends } = req.body;

  const allIds = Array.isArray(ids) ? ids : [ids];
  const allLabels = Array.isArray(labels) ? labels : [labels];
  const allStarts = Array.isArray(starts) ? starts : [starts];
  const allEnds = Array.isArray(ends) ? ends : [ends];

  const stmt = db.prepare("UPDATE time_slots SET label = ?, start = ?, end = ? WHERE id = ?");

  allIds.forEach((id, i) => {
    stmt.run(allLabels[i], allStarts[i], allEnds[i], id);
  });

  stmt.finalize(() => {
    res.redirect("/admin_dashboard");
  });
});




app.get("/api/timeblocks", (req, res) => {
  db.all("SELECT * FROM time_slots", (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });

    const blocks = {};
    rows.forEach(slot => {
      blocks[slot.label] = {
        start: slot.start,
        end: slot.end
      };
    });

    res.json(blocks);
  });
});

app.get('/manage-timeslots', (req, res) => {
  db.all("SELECT * FROM time_slots ORDER BY start", (err, rows) => {
    if (err) {
      return res.status(500).send("ุฎุทุฃ ูู ุชุญููู ุงููุชุฑุงุช ุงูุฒูููุฉ");
    }
    res.render("time_slots", { slots: rows });
  });
});
app.get("/api/timeblocks", (req, res) => {
  db.all("SELECT * FROM time_slots", (err, rows) => {
    if (err) return res.status(500).json({ error: "ุฎุทุฃ" });
    const map = {};
    rows.forEach(r => map[r.label] = { start: r.start, end: r.end });
    res.json(map);
  });
});
app.get("/time_slots", (req, res) => {
  db.all("SELECT * FROM time_slots ORDER BY id", (err, slots) => {
    if (err) return res.status(500).send("ูุดู ูู ุชุญููู ุงููุชุฑุงุช");
    res.render("time_slots", { slots });
  });
});

app.post("/add-timeslot", (req, res) => {
  const { label, start, end } = req.body;
  db.run("INSERT INTO time_slots (label, start, end) VALUES (?, ?, ?)", [label, start, end], err => {
    if (err) return res.status(500).send("ูุดู ูู ุงูุฅุถุงูุฉ");
    res.redirect("/admin_dashboard");
  });
});








// ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ


app.post("/addUser", (req, res) => {
    const { fullName, username, password, supplier, branch, phone, email } = req.body;

    // โ ุงุณุชุฎุฏู ุนูุงูุงุช ุงูุงุณุชููุงู (ุ) ุจุฏูุงู ูู ุงูููู ุงููุจุงุดุฑุฉ
    const sql = `INSERT INTO users (fullName, username, password, supplier, branch, phone, email) VALUES (?, ?, ?, ?, ?, ?, ?)`;

    db.run(sql, [fullName, username, password, supplier, branch, phone, email], function (err) {
        if (err) {
            return res.status(500).json({ 
                success: false, 
                message: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุถุงูุฉ ุงููุณุชุฎุฏู", 
                error: err.message 
            });
        }
        res.json({ 
            success: true, 
            message: "ุชูุช ุฅุถุงูุฉ ุงููุณุชุฎุฏู ุจูุฌุงุญ!", 
            id: this.lastID 
        });
    });
});
app.get("/getUsers", (req, res) => {
    db.all("SELECT * FROM users", [], (err, rows) => {
        if (err) {
            return res.status(500).json({ success: false, message: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุงูุจูุงูุงุช", error: err.message });
        }
        res.json({ success: true, users: rows });
    });
});


// ุชุญุฏูุซ ุงููุณุชุฎุฏู
app.get("/editUser/:id", (req, res) => {
    const userId = req.params.id;
    req.session.previousPage = req.headers.referer; // ุงุญูุธ ุงูุฑุงุจุท ุงูุณุงุจู

    db.get("SELECT * FROM users WHERE id = ?", [userId], (err, user) => {
        if (err) {
            console.error("Error fetching user:", err);
            return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู.");
        }

        if (!user) {
            return res.status(404).send("ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ.");
        }

        res.render("updateUser", {
            id: user.id,
            username: user.username,
            fullname: user.fullName,
            supplier: user.supplier,
            branch: user.branch,
            phone: user.phone,
            email: user.email,
            
        });
    });
});
app.post("/updateUser/:id", (req, res) => {
    const userId = req.params.id;
    
    const { fullName, username, password, supplier, branch, phone, email } = req.body;

    let query = "UPDATE users SET fullName = ?, username = ?, supplier = ?, branch = ?, phone = ?, email = ?";
    const params = [fullName, username, supplier, branch, phone, email];

    if (password && password.trim() !== "") {
        query += ", password = ?";
        params.push(password);
    }

    query += " WHERE id = ?";
    params.push(userId);

    db.run(query, params, function(err) {
        if (err) {
            console.error("Error updating user:", err);
            return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุงููุณุชุฎุฏู.");
        }

        const redirectTo = req.session.previousPage || "/admin_dashboard";
    delete req.session.previousPage; // ุญุฐู ุงููููุฉ ุจุนุฏ ุงูุงุณุชุฎุฏุงู
    res.redirect(redirectTo);
    });
});



// ุญุฐู ุงููุณุชุฎุฏู
// Delete user API
app.delete("/deleteUser/:id", (req, res) => {
    const userId = req.params.id;

    db.run("DELETE FROM users WHERE id = ?", [userId], function(err) {
        if(err) {
            console.error("Error deleting user:", err);
            return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงููุณุชุฎุฏู.");
        }

        if(this.changes === 0) {
            return res.status(404).send("ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ.");
        }

        res.send("ุชู ุญุฐู ุงููุณุชุฎุฏู ุจูุฌุงุญ.");
    });
});

//////////////////////////////////////////////////////
// ุฅุถุงูุฉ ุทูุจ ุฌุฏูุฏ
app.post('/addtask', (req, res) => {
  const {
    customerPhone,
    customerName,
    customerLat,
    customerLng,
    serviceDate,
    serviceTime,
    paymentMethod,
    totalPrice,
    services // โ [{ id, quantity }]
  } = req.body;

  const createdByUserId = req.session?.user?.id || null;
  const createdBySupplier = req.session?.user?.fullName || 'Admin';

  if (
    !customerPhone || !customerName || !customerLat || !customerLng ||
    !serviceDate || !serviceTime || !paymentMethod || !totalPrice ||
    !Array.isArray(services) || services.length === 0
  ) {
    return res.status(400).json({
      success: false,
      message: "ุฌููุน ุงูุญููู ูุทููุจุฉ ููุฌุจ ุงุฎุชูุงุฑ ุฎุฏูุฉ ูุงุญุฏุฉ ุนูู ุงูุฃูู"
    });
  }

  const insertTaskQuery = `
    INSERT INTO tasks (
      customerPhone, customerName, customerLat, customerLng,
      serviceDate, serviceTime, paymentMethod, status,
      totalPrice, createdAt, createdByUserId,createdBySupplier
    ) VALUES (?, ?, ?, ?, ?, ?, ?, 'New', ?, datetime('now'), ?,?)
  `;

  db.run(insertTaskQuery, [
    customerPhone,
    customerName,
    customerLat,
    customerLng,
    serviceDate,
    serviceTime,
    paymentMethod,
    totalPrice,
    createdByUserId,
    createdBySupplier
  ], function (err) {
    if (err) {
      console.error("DB Error:", err);
      return res.status(500).json({ success: false, error: err.message });
    }

    const taskId = this.lastID;

    const stmt = db.prepare('INSERT INTO task_services (task_id, service_id, quantity) VALUES (?, ?, ?)');
    services.forEach(s => {
      if (s.id && s.quantity) {
        stmt.run(taskId, s.id, s.quantity);
      }
    });
    stmt.finalize();

    res.json({ success: true, taskId });
  });
});

app.get("/search-by-creator", (req, res) => {
  const { creatorName = '' } = req.query;

  if (!creatorName) {
    return res.status(400).json({ success: false, message: "ูุฌุจ ุฅุฏุฎุงู ุงุณู ููุดุฆ ุงูุจุญุซ" });
  }

  const query = `
    SELECT t.*, u.fullName AS creatorName
    FROM tasks t
    LEFT JOIN users u ON t.createdByUserId = u.id
    WHERE u.fullName LIKE ?
    ORDER BY t.createdAt DESC
  `;

  db.all(query, [`%${creatorName}%`], (err, tasks) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช" });
    }

    res.json({ success: true, tasks });
  });
});





  





// ุฌูุจ ุฌููุน ุงูุทูุจุงุช
app.get("/gettasks", (req, res) => {
  const { supplier = "", status = "" } = req.query;

  let baseQuery = `SELECT * FROM tasks WHERE 1=1`;
  const params = [];

  if (supplier) {
    baseQuery += ` AND customerName LIKE ?`;
    params.push(`%${supplier}%`);
  }

  if (status) {
    baseQuery += ` AND LOWER(status) = LOWER(?)`;
    params.push(status.toLowerCase());
  }

  db.all(baseQuery, params, (err, tasks) => {
    if (err) {
      return res.status(500).json({
        success: false,
        message: "ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช",
        error: err.message,
      });
    }

    if (!tasks.length) return res.json([]);

    const taskIds = tasks.map(t => t.id);
    const placeholders = taskIds.map(() => '?').join(',');

    const serviceQuery = `
      SELECT ts.task_id, s.name, s.price, ts.quantity
      FROM task_services ts 
      JOIN services s ON ts.service_id = s.id 
      WHERE ts.task_id IN (${placeholders})
    `;

    db.all(serviceQuery, taskIds, (err, serviceRows) => {
      if (err) {
        return res.status(500).json({
          success: false,
          message: "ุฎุทุฃ ูู ุฌูุจ ุงูุฎุฏูุงุช",
          error: err.message,
        });
      }

      // ุฑุจุท ุงูุฎุฏูุงุช ุจูู ุทูุจ ูุน ุงููููุฉ ูุงูุณุนุฑ
      const servicesMap = {};
      serviceRows.forEach(row => {
        if (!servicesMap[row.task_id]) servicesMap[row.task_id] = [];
        const totalPrice = row.price * row.quantity;
servicesMap[row.task_id].push(`${row.name} (ร${row.quantity}) - ${totalPrice.toFixed(2)} SAR`);
      });

      const enrichedTasks = tasks.map(task => ({
        ...task,
        customerLocation: `https://www.google.com/maps?q=${task.customerLat},${task.customerLng}`,
        services: servicesMap[task.id] || []
      }));

      res.json(enrichedTasks);
    });
  });
});

//////////////////////////////////////////////////////////////////////////////////////
app.get("/user-tasks", (req, res) => {
  const userId = req.session?.user?.id;
  if (!userId) return res.status(401).json({ success: false, message: "Unauthorized" });

  db.all(`SELECT * FROM tasks WHERE createdByUserId = ?`, [userId], (err, tasks) => {
    if (err) return res.status(500).json({ error: err.message });
    if (!tasks.length) return res.json([]);

    const taskIds = tasks.map(t => t.id);
    const placeholders = taskIds.map(() => '?').join(',');
    
    const serviceQuery = `
      SELECT ts.task_id, s.name, ts.quantity, s.price
      FROM task_services ts
      JOIN services s ON ts.service_id = s.id
      WHERE ts.task_id IN (${placeholders})
    `;

    db.all(serviceQuery, taskIds, (err, serviceRows) => {
      if (err) return res.status(500).json({ error: err.message });

      const servicesMap = {};
      serviceRows.forEach(row => {
        if (!servicesMap[row.task_id]) servicesMap[row.task_id] = [];
        const totalPrice = row.price * row.quantity;
        servicesMap[row.task_id].push({
          name: row.name,
          quantity: row.quantity,
          totalPrice: totalPrice.toFixed(2)
        });
      });

      const enriched = tasks.map(task => ({
        ...task,
        customerLocation: `https://www.google.com/maps?q=${task.customerLat},${task.customerLng}`,
        services: servicesMap[task.id] || []
      }));

      res.json(enriched);
    });
  });
});








  app.get('/user_tasks', (req, res) => {
    const user = req.session.user;
    if (!user) return res.status(401).send("ุบูุฑ ูุตุฑุญ");
  
    const query = `SELECT * FROM tasks WHERE createdByUserId = ? ORDER BY createdAt DESC`;
  
    db.all(query, [user.id], (err, tasks) => {
      if (err) return res.status(500).send("ุฎุทุฃ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช");
  
      if (!tasks.length) return res.render("user_tasks", { tasks: [] });
  
      const taskIds = tasks.map(t => t.id);
      const placeholders = taskIds.map(() => '?').join(',');
      const serviceQuery = `SELECT ts.task_id, s.name FROM task_services ts JOIN services s ON ts.service_id = s.id WHERE ts.task_id IN (${placeholders})`;
  
      db.all(serviceQuery, taskIds, (err, serviceRows) => {
        if (err) return res.status(500).send("ูุดู ูู ุฌูุจ ุงูุฎุฏูุงุช");
  
        const servicesMap = {};
        serviceRows.forEach(row => {
          if (!servicesMap[row.task_id]) servicesMap[row.task_id] = [];
          servicesMap[row.task_id].push(row.name);
        });
  
        const enriched = tasks.map(t => ({
          ...t,
          services: servicesMap[t.id] || [],
          customerLocation: `https://www.google.com/maps?q=${t.customerLat},${t.customerLng}`
        }));
  
        res.render("user_tasks", { tasks: enriched });
      });
    });
  });
  app.get('/my-tasks', (req, res) => {
    const userId = req.session.userId;
    if (!userId) return res.status(401).send("ุบูุฑ ูุตุฑุญ");
  
    const query = `SELECT * FROM tasks WHERE createdByUserId = ?`;
    db.all(query, [userId], (err, tasks) => {
      if (err) return res.status(500).send("ุฎุทุฃ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช");
  
      const taskIds = tasks.map(t => t.id);
      if (taskIds.length === 0) return res.render("user_tasks", { tasks: [] });
  
      const placeholders = taskIds.map(() => '?').join(',');
      db.all(`SELECT ts.task_id, s.name FROM task_services ts JOIN services s ON ts.service_id = s.id WHERE ts.task_id IN (${placeholders})`, taskIds, (err, serviceRows) => {
        const servicesMap = {};
        serviceRows.forEach(row => {
          if (!servicesMap[row.task_id]) servicesMap[row.task_id] = [];
          servicesMap[row.task_id].push(row.name);
        });
  
        const enriched = tasks.map(t => ({
          ...t,
          services: servicesMap[t.id] || [],
          customerLocation: `https://www.google.com/maps?q=${t.customerLat},${t.customerLng}`
        }));
  
        res.render("user_tasks", { tasks: enriched });
      });
    });
  });
  
  



// GET route to display the edit form
// GET route to display the edit form - Fixed to match your schema
app.get('/edit_task/:id', (req, res) => {
  const taskId = req.params.id;

  db.get(`SELECT * FROM tasks WHERE id = ?`, [taskId], (err, task) => {
    if (err) return res.status(500).send('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุจูุงูุงุช ุงููููุฉ');
    if (!task) return res.status(404).send('ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฉ');

    db.all(`SELECT service_id, quantity FROM task_services WHERE task_id = ?`, [taskId], (err, serviceRows) => {
      if (err) return res.status(500).send('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุฎุฏูุงุช ุงููููุฉ');

      const selectedServiceIds = serviceRows.map(row => row.service_id);
      const serviceQuantities = {};
      serviceRows.forEach(row => {
        serviceQuantities[row.service_id] = row.quantity;
      });

      db.all(`SELECT * FROM services`, [], (err, allServices) => {
        if (err) return res.status(500).send('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ูุงุฆูุฉ ุงูุฎุฏูุงุช');

        // โ ุญุณุงุจ ุงูุณุนุฑ ุงูุฅุฌูุงูู ูุน ุงูุถุฑูุจุฉ
        let baseTotal = 0;
        selectedServiceIds.forEach(id => {
          const service = allServices.find(s => s.id === id);
          if (service) {
            const qty = serviceQuantities[id] || 1;
            baseTotal += service.price * qty;
          }
        });

        const vat = baseTotal * 0.15;
        const calculatedTotalPrice = baseTotal + vat;

        // โ ุงุณุชุฎุฏู ุงูุณุนุฑ ุงููุญููุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅุฐุง ูุงู ุงูุณุนุฑ ุงููุญุณูุจ 0
        const finalTotalPrice = calculatedTotalPrice === 0 ? task.totalPrice : calculatedTotalPrice;

        res.render('editTask', {
          task: {
            ...task,
            serviceIds: selectedServiceIds,
            totalPrice: finalTotalPrice
          },
          allServices,
          selectedServiceIds,
          serviceQuantities
        });
      });
    });
  });
});
  app.post('/update_task/:id', (req, res) => {
    const taskId = req.params.id;
    
    const {
      customerPhone,
      customerName,
      customerLat,
      customerLng,
      serviceTime,
      paymentMethod,
      status,
      totalPrice
    } = req.body;
  
    const updateQuery = `
      UPDATE tasks SET customerName = ?, customerPhone = ?, customerLat = ?, customerLng = ?,
      serviceTime = ?, paymentMethod = ?, status = ?, totalPrice = ? WHERE id = ?
    `;
  
    db.run(updateQuery, [
      customerName,
      customerPhone,
      customerLat,
      customerLng,
      serviceTime,
      paymentMethod,
      status,
      totalPrice,
      taskId
    ], err => {
      if (err) return res.status(500).send("ูุดู ุงูุชุญุฏูุซ");
  
      // ๐งน ุญุฐู ุงูุฎุฏูุงุช ุงููุฏููุฉ
      db.run(`DELETE FROM task_services WHERE task_id = ?`, [taskId], err => {
        if (err) return res.status(500).send("ูุดู ุญุฐู ุงูุฎุฏูุงุช");
  
        const insertStmt = db.prepare(`INSERT INTO task_services (task_id, service_id, quantity) VALUES (?, ?, ?)`);
  
        Object.keys(req.body).forEach(key => {
          if (key.startsWith("qty_")) {
            const serviceId = key.split("_")[1];
            const quantity = parseInt(req.body[key]);
            insertStmt.run(taskId, serviceId, quantity);
          }
        });
  
        insertStmt.finalize();
        res.redirect("/admin_dashboard");
      });
    });
  });
  app.post('/edit_task/:id', (req, res) => {
    const taskId = req.params.id;
    const {
      customerPhone,
      customerName,
      customerLat,
      customerLng,
      serviceTime,
      paymentMethod,
      status,
      totalPrice,
      services
    } = req.body;
  
    if (!customerPhone || !customerName || !customerLat || !customerLng || !serviceTime || !paymentMethod || !Array.isArray(services) || services.length === 0) {
      return res.status(400).json({ success: false, message: "ุฌููุน ุงูุญููู ูุทููุจุฉ ููุฌุจ ุงุฎุชูุงุฑ ุฎุฏูุฉ ูุงุญุฏุฉ ุนูู ุงูุฃูู" });
    }
  
    const updateQuery = `
      UPDATE tasks SET customerName = ?, customerPhone = ?, customerLat = ?, customerLng = ?,
      serviceTime = ?, paymentMethod = ?, status = ?, totalPrice = ? WHERE id = ?
    `;
  
    db.run(updateQuery, [
      customerName,
      customerPhone,
      customerLat,
      customerLng,
      serviceTime,
      paymentMethod,
      status,
      totalPrice,
      taskId
    ], err => {
      if (err) return res.status(500).json({ success: false, message: "ูุดู ุงูุชุญุฏูุซ", error: err.message });
  
      // ุญุฐู ุงูุฎุฏูุงุช ุงููุฏููุฉ
      db.run(`DELETE FROM task_services WHERE task_id = ?`, [taskId], err => {
        if (err) return res.status(500).json({ success: false, message: "ูุดู ุญุฐู ุงูุฎุฏูุงุช" });
  
        const insertStmt = db.prepare(`INSERT INTO task_services (task_id, service_id, quantity) VALUES (?, ?, ?)`);
  
        services.forEach(service => {
          insertStmt.run(taskId, service.id, service.quantity || 1);
        });
  
        insertStmt.finalize();
        return res.json({ success: true, message: "ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ" });
      });
    });
  });
  
  //////////////////////////////
  app.get("/orders-by-supplier", (req, res) => {
    const supplier = req.query.supplier;
  
    if (!supplier) return res.status(400).send("ูุฌุจ ุชุญุฏูุฏ ุงุณู ุงูููุฑุฏ");
  
    db.all(`
      SELECT * FROM tasks
      WHERE createdByUserId IN (SELECT id FROM users WHERE supplier = ?)
      ORDER BY createdAt DESC
    `, [supplier], (err, tasks) => {
      if (err) return res.status(500).send("ุฎุทุฃ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช");
  
      if (!tasks.length) return res.render("orders_by_supplier", { supplier, tasks: [] });
  
      const taskIds = tasks.map(t => t.id);
      const placeholders = taskIds.map(() => '?').join(',');
  
      const serviceQuery = `
        SELECT ts.task_id, s.name, ts.quantity, s.price
        FROM task_services ts
        JOIN services s ON ts.service_id = s.id
        WHERE ts.task_id IN (${placeholders})
      `;
  
      db.all(serviceQuery, taskIds, (err, serviceRows) => {
        if (err) return res.status(500).send("ูุดู ูู ุฌูุจ ุงูุฎุฏูุงุช");
  
        const servicesMap = {};
        serviceRows.forEach(row => {
          if (!servicesMap[row.task_id]) servicesMap[row.task_id] = [];
          const totalPrice = (row.price || 0) * (row.quantity || 1);
          servicesMap[row.task_id].push(`${row.name} (ร${row.quantity}) - ${totalPrice.toFixed(2)} SAR`);
        });
  
        const enrichedTasks = tasks.map(task => ({
          ...task,
          serviceNames: servicesMap[task.id] ? servicesMap[task.id].join(', ') : "ูุง ุชูุฌุฏ ุฎุฏูุงุช"
        }));
  
        res.render("orders_by_supplier", { supplier, tasks: enrichedTasks });
      });
    });
  });
  
  
  
  
  
  
  

  // DELETE route to delete an order
  app.delete('/deleteorder/:id', (req, res) => {
    const orderId = req.params.id;

    const sql = 'DELETE FROM tasks WHERE id = ?';

    db.run(sql, [orderId], function (err) {
        if (err) {
            console.error("Error deleting task:", err);
            return res.status(500).json({
                success: false,
                message: "ูุดู ุญุฐู ุงูุทูุจ",
                error: err.message
            });
        }

        if (this.changes === 0) {
            return res.status(404).json({
                success: false,
                message: "ุงูุทูุจ ุบูุฑ ููุฌูุฏ"
            });
        }

        res.json({
            success: true,
            message: "ุชู ุญุฐู ุงูุทูุจ ุจูุฌุงุญ"
        });
    });
});
app.get("/chart", (req, res) => {
    res.render("chart");
});

app.get('/search-order/:phone', (req, res) => {
  const { phone } = req.params;

  if (!phone || phone.trim() === "") {
    return res.status(400).json({ success: false, message: 'ุฑูู ุงููุงุชู ูุทููุจ' });
  }

  db.get(`
    SELECT 
      id,
      customerPhone,
      customerName,
      customerLat,
      customerLng,
      serviceDate,
      serviceTime,
      paymentMethod,
      status,
      totalPrice,
      createdAt
    FROM tasks 
    WHERE customerPhone = ?
    ORDER BY createdAt DESC
    LIMIT 1
  `, [phone.trim()], (err, task) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ success: false, message: 'ุฎุทุฃ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช', error: err.message });
    }

    if (!task) {
      return res.status(404).json({ success: false, message: 'ูุง ููุฌุฏ ุทูุจ ูุฑุชุจุท ุจูุฐุง ุงูุฑูู' });
    }

    // ุฅุถุงูุฉ ุฑุงุจุท ุงูุฎุฑูุทุฉ ุญุณุจ ุฎุทูุท ุงูุทูู ูุงูุนุฑุถ
    task.customerLocation = `https://www.google.com/maps?q=${task.customerLat},${task.customerLng}`;

    res.json({
      success: true,
      task: {
        id: task.id,
        customerPhone: task.customerPhone,
        customerName: task.customerName,
        customerLat: task.customerLat,
        customerLng: task.customerLng,
        customerLocation: task.customerLocation,
        serviceDate: task.serviceDate,
        serviceTime: task.serviceTime,
        paymentMethod: task.paymentMethod,
        status: task.status,
        totalPrice: task.totalPrice,
        createdAt: task.createdAt
      }
    });
  });
});




/////////////////////////////////////////////////
app.get("/search-tasks", (req, res) => {
  const { name = '', status = '' } = req.query;

  let baseQuery = `
    SELECT t.*, u.supplier AS createdBySupplier
    FROM tasks t
    LEFT JOIN users u ON t.createdByUserId = u.id
    WHERE 1=1
  `;
  const conditions = [];
  const params = [];

  if (name) {
    conditions.push("u.supplier LIKE ?");
    params.push(`%${name}%`);
  }

  if (status) {
    conditions.push("LOWER(t.status) = LOWER(?)");
    params.push(status.toLowerCase());
  }

  const finalQuery = [baseQuery, ...conditions.map(c => `AND ${c}`)].join(" ");

  db.all(finalQuery, params, (err, tasks) => {
    if (err) return res.status(500).json({ error: err.message });
    if (!tasks.length) return res.json([]);

    const taskIds = tasks.map(t => t.id);
    const placeholders = taskIds.map(() => '?').join(',');

    const serviceQuery = `
  SELECT ts.task_id, s.name, s.price, ts.quantity
  FROM task_services ts
  JOIN services s ON ts.service_id = s.id
  WHERE ts.task_id IN (${placeholders})
`;

db.all(serviceQuery, taskIds, (err, serviceRows) => {
  if (err) return res.status(500).json({ error: err.message });

  const servicesMap = {};
  serviceRows.forEach(r => {
    if (!servicesMap[r.task_id]) servicesMap[r.task_id] = [];
    const totalServicePrice = (r.price || 0) * (r.quantity || 1);
    servicesMap[r.task_id].push(`${r.name} (ร${r.quantity}) - ${totalServicePrice.toFixed(2)} SAR`);
  });

  const enriched = tasks.map(task => ({
    ...task,
    customerLocation: `https://www.google.com/maps?q=${task.customerLat},${task.customerLng}`,
    services: servicesMap[task.id] || []
  }));

  res.json(enriched);
});

  });
});


const columnExists = async (tableName, columnName) => {
  return new Promise((resolve, reject) => {
    db.all(`PRAGMA table_info(${tableName})`, (err, rows) => {
      if (err) return reject(err);
      const exists = rows.some(row => row.name === columnName);
      resolve(exists);
    });
  });
};

const addColumnIfNotExists = async (table, column, type) => {
  const exists = await columnExists(table, column);
  if (!exists) {
    db.run(`ALTER TABLE ${table} ADD COLUMN ${column} ${type}`);
    console.log(`โ Added column ${column} to ${table}`);
  } else {
    console.log(`โน๏ธ Column ${column} already exists in ${table}`);
  }
};
(async () => {
  await addColumnIfNotExists("tasks", "createdByUserId", "INTEGER");
})();
///////////////////////////////////////////////////////////////////
(async () => {
  await addColumnIfNotExists("services", "category", "TEXT");
})();

(async () => {
  await addColumnIfNotExists("task_services", "quantity", "INTEGER");
})();

(async () => {
  await addColumnIfNotExists("tasks", "createdBySupplier", "TEXT");
})();
//////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
app.get('/manage-services', (req, res) => {
  db.all('SELECT * FROM services', [], (err, services) => {
    if (err) return res.status(500).send("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุฎุฏูุงุช");
    res.render('manage_services', { services });
  });
});

app.post('/add-service', (req, res) => {
  const { name, category, price } = req.body;
  db.run('INSERT INTO services (name, category, price) VALUES (?, ?, ?)', [name, category, price], err => {
    if (err) return res.status(500).send("ูุดู ูู ุงูุฅุถุงูุฉ");
    res.redirect('admin_dashboard');
  });
});

app.post('/update-service/:id', (req, res) => {
  const { name, category, price } = req.body;
  db.run('UPDATE services SET name = ?, category = ?, price = ? WHERE id = ?', [name, category, price, req.params.id], err => {
    if (err) return res.status(500).send("ูุดู ุงูุชุนุฏูู");
    res.redirect('/admin_dashboard');
  });
});

app.get('/delete-service/:id', (req, res) => {
  db.run('DELETE FROM services WHERE id = ?', [req.params.id], err => {
    if (err) return res.status(500).send("ูุดู ุงูุญุฐู");
    res.redirect('/admin_dashboard');
  });
});

app.get("/api/services", (req, res) => {
  db.all("SELECT * FROM services", (err, rows) => {
    if (err) {
      return res.status(500).json({ error: "ูุดู ูู ุฌูุจ ุงูุฎุฏูุงุช" });
    }

    // ุชูุณูู ุญุณุจ ุงูุชุตููู
    const grouped = rows.reduce((acc, s) => {
      if (!acc[s.category]) acc[s.category] = [];
      acc[s.category].push(s);
      return acc;
    }, {});

    res.json(grouped);
  });
});






// ุชุดุบูู ุงูุฎุงุฏู
const PORT = process.env.PORT || 3000;;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});